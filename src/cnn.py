# -*- coding: utf-8 -*-
"""cnn

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bNZmQtgnXcpuZwNNyE6NoNYANYHlt5yX
"""

import torch
import time
import random
import spacy
import pandas as pd
import numpy as np
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim


from torchtext.legacy import data
from torchtext.legacy import datasets
from sklearn.model_selection import train_test_split

seed = 42

device = 'cuda' if torch.cuda.is_available() else 'cpu'

TEXT = data.Field(tokenize = 'spacy', tokenizer_language = 'en_core_web_sm')
LABEL = data.LabelField(sequential=False, use_vocab = False)

df = pd.read_csv("emails.csv")
df.rename(columns={"from":"author"}, inplace = True)

df["text"].replace('', np.nan, inplace = True)
df.dropna(inplace = True)

data["length"] = data["text"].apply(lambda x: len(x.split()))
data = data.drop(data[data.length > 500].index)
data = data.drop(data[data.length < 10].index)

items = df.author.value_counts().to_dict().items()
df = df[df.author.isin([key for key, val in items if val > 2000])]

texts = df.text.tolist()
labels = df.author.tolist()
label2id = {i: idx for (idx, i) in enumerate(sorted(set(labels)))}
id2label = {label2id[i]: i for i in label2id}
labels = [label2id[i] for i in labels]

train_texts, test_texts, train_labels, test_labels = train_test_split(texts, labels, test_size=.2, random_state = 42)

train_df_dict = {'text':train_texts, 'label':train_labels}
test_df_dict = {'text':test_texts, 'label':test_labels}

train_df = pd.DataFrame.from_dict(train_df_dict)
test_df = pd.DataFrame.from_dict(test_df_dict)

train_df.to_csv('wapo_train.csv', index =  False, header = False)
test_df.to_csv('wapo_test.csv', index = False, header = False)

train_data, test_data = data.TabularDataset.splits(
    path='./', train='wapo_train.csv', test='wapo_test.csv', format='csv',
    fields=[('text', TEXT), ('label', LABEL)])

TEXT.build_vocab(train_data, vectors = "glove.6B.50d", unk_init = torch.Tensor.normal_)

train_iter, test_iter = data.BucketIterator.splits(
    (train_data, test_data), batch_sizes=(4, 16),
    sort_key=lambda x: len(x.text), device=device)

class CNN(nn.Module):
    def __init__(self, vocab_size, embedding_dim, n_filters, filter_sizes, output_dim, 
                 dropout, pad_idx):
        
        super().__init__()
        self.embedding = nn.Embedding(vocab_size, embedding_dim)
        self.convs = nn.ModuleList([
                                    nn.Conv2d(in_channels = 1, 
                                              out_channels = n_filters, 
                                              kernel_size = (fs, embedding_dim)) 
                                    for fs in filter_sizes
                                    ])
        self.fc = nn.Linear(len(filter_sizes) * n_filters, output_dim)
        self.dropout = nn.Dropout(dropout)
        
    def forward(self, text):        
        text = text.permute(1, 0)        
        embedded = self.embedding(text)        
        embedded = embedded.unsqueeze(1)        
        conved = [F.relu(conv(embedded)).squeeze(3) for conv in self.convs]        
        pooled = [F.max_pool1d(conv, conv.shape[2]).squeeze(2) for conv in conved]
        cat = self.dropout(torch.cat(pooled, dim = 1))
            
        return self.fc(cat)

INPUT_DIM = len(TEXT.vocab)
EMBEDDING_DIM = 50
N_FILTERS = 100
FILTER_SIZES = [2,3,4]
OUTPUT_DIM = 15
DROPOUT = 0.5
PAD_IDX = TEXT.vocab.stoi[TEXT.pad_token]

model = CNN(INPUT_DIM, EMBEDDING_DIM, N_FILTERS, FILTER_SIZES, OUTPUT_DIM, DROPOUT, PAD_IDX)
model = nn.DataParallel(model)

def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)

print(f'The model has {count_parameters(model):,} trainable parameters')

pretrained_embeddings = TEXT.vocab.vectors
model.module.embedding.weight.data.copy_(pretrained_embeddings)

UNK_IDX = TEXT.vocab.stoi[TEXT.unk_token]

model.module.embedding.weight.data[UNK_IDX] = torch.zeros(EMBEDDING_DIM)
model.module.embedding.weight.data[PAD_IDX] = torch.zeros(EMBEDDING_DIM)

optimizer = optim.AdamW(model.parameters())
criterion = nn.CrossEntropyLoss()
model = model.to(device)
criterion = criterion.to(device)

def categorical_accuracy(preds, y):
    """
    Returns accuracy per batch, i.e. if you get 8/10 right, this returns 0.8, NOT 8
    """
    top_pred = preds.argmax(1, keepdim = True)
    correct = top_pred.eq(y.view_as(top_pred)).sum()
    acc = correct.float() / y.shape[0]
    return acc

def train(model, iterator, optimizer, criterion):
    epoch_loss = 0
    epoch_acc = 0
    
    model.train()
    
    for batch in iterator:        
        optimizer.zero_grad()

        predictions = model(batch.text)
        loss = criterion(predictions, batch.label)
        acc = categorical_accuracy(predictions, batch.label)
        loss.backward()
        
        optimizer.step()        

        epoch_loss += loss.item()
        epoch_acc += acc.item()
        
    return epoch_loss / len(iterator), epoch_acc / len(iterator)

def epoch_time(start_time, end_time):
    elapsed_time = end_time - start_time
    elapsed_mins = int(elapsed_time / 60)
    elapsed_secs = int(elapsed_time - (elapsed_mins * 60))
    return elapsed_mins, elapsed_secs

N_EPOCHS = 10

for epoch in range(N_EPOCHS):
    start_time = time.time()
    
    train_loss, train_acc = train(model, train_iter, optimizer, criterion)
    
    end_time = time.time()
    epoch_mins, epoch_secs = epoch_time(start_time, end_time)
    
    torch.save({'epoch': epoch,
            'model_state_dict': model.module.state_dict(),
            'optimizer_state_dict': optimizer.state_dict(),
            'loss': train_loss, 'acc':train_acc}, f'cnn_models_emails/model_{epoch}')

    print(f'Epoch: {epoch+1:02} | Epoch Time: {epoch_mins}m {epoch_secs}s')
    print(f'\tTrain Loss: {train_loss:.3f} | Train Acc: {train_acc*100:.2f}%')

